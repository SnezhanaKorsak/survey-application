{"version":3,"sources":["start/Start.module.css","test/question/Question.module.css","test/Test.module.css","results/resultForQuestion/ResultForQuestion.module.css","header/Header.module.css","results/Results.module.css","navbar/Navbar.module.css","footer/Footer.module.css","navbar/Navbar.tsx","header/Header.tsx","state/settingsReducer.ts","start/Start.tsx","state/resultsReducer.ts","test/question/Question.tsx","state/questionsReducer.ts","test/Test.tsx","results/resultForQuestion/ResultForQuestion.tsx","results/Results.tsx","footer/Footer.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["module","exports","Navbar","className","s","nav","to","Header","finishClassName","window","scrollY","header","headerFixed","userName","useSelector","state","settings","name","initialState","nameStartButton","nameNextButton","nameFinishButton","isEditable","setNameForButton","date","type","Start","dispatch","useDispatch","useState","setName","addUserNameHandler","setUserName","startBlock","startContainer","title","conditions","enterBlock","inputName","value","onChange","e","currentTarget","trim","onKeyPress","key","placeholder","startButton","onClick","disabled","results","Question","answer","setAnswer","id","setId","questions","currentQuestion","filter","q","nameButton","mappedOptions","answerType","answers","map","options","currentId","onChangeCallback","textType","autoFocus","question","length","quest","button","addResult","Test","useEffect","fetch","then","res","json","testBlock","testContainer","testContainerBottom","testContainerMiddle","testContainerTop","ResultForQuestion","userAnswer","isHidden","setIsHidden","resultForQuestionContainer","coverBlock","questionNumber","questionTitle","answerBlock","Results","resultsBlock","resultsContainer","r","Footer","footer","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","f","newResult","copy","console","log","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.668085da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"startBlock\":\"Start_startBlock__1ldJF\",\"startContainer\":\"Start_startContainer__5_ppv\",\"title\":\"Start_title__lReC_\",\"conditions\":\"Start_conditions__D3Bv0\",\"enterBlock\":\"Start_enterBlock__1Bh7b\",\"inputName\":\"Start_inputName__1J-mO\",\"startButton\":\"Start_startButton__1S6hk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"question\":\"Question_question__2MuF5\",\"answer\":\"Question_answer__3zuQ0\",\"nextButton\":\"Question_nextButton__iMXks\",\"options\":\"Question_options__19MKy\",\"textType\":\"Question_textType__2mpHo\",\"button\":\"Question_button__hBNxk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testBlock\":\"Test_testBlock__d_Qxn\",\"testContainer\":\"Test_testContainer__LoI3_\",\"testContainerTop\":\"Test_testContainerTop__3q261\",\"testContainerMiddle\":\"Test_testContainerMiddle__1Vpy-\",\"testContainerBottom\":\"Test_testContainerBottom__2d43u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultForQuestionContainer\":\"ResultForQuestion_resultForQuestionContainer__2BYIt\",\"coverBlock\":\"ResultForQuestion_coverBlock__3yBBc\",\"answerBlock\":\"ResultForQuestion_answerBlock__1dtkt\",\"questionTitle\":\"ResultForQuestion_questionTitle__-8tP-\",\"questionNumber\":\"ResultForQuestion_questionNumber__1AqYp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3u-Rw\",\"headerFixed\":\"Header_headerFixed__1PZsr\",\"name\":\"Header_name__6aLrO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultsBlock\":\"Results_resultsBlock__1dklB\",\"resultsContainer\":\"Results_resultsContainer__R0G_g\",\"title\":\"Results_title__3Dd22\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3XvF1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__34nZb\"};","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <div className={s.nav}>\r\n            <Link to={'/start'}>НАЧАЛО</Link>\r\n            <Link to={'/test'}>ТЕСТ</Link>\r\n            <Link to={'/results'}>РЕЗУЛЬТАТЫ</Link>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {Navbar} from \"../navbar/Navbar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\n\r\nexport const Header = () => {\r\n    let finishClassName;\r\n    window.scrollY > 1000 ? finishClassName = `${s.header}` : finishClassName = `${s.header} ${s.headerFixed}`\r\n\r\n    let userName = useSelector<AppRootStateType, string>(state => state.settings.userName)\r\n\r\n        return (\r\n        <div className={finishClassName}>\r\n            <div className={s.name}>Опрос проходит: {userName}</div>\r\n            <Navbar/>\r\n        </div>\r\n    )\r\n}","import { Dispatch } from \"redux\"\r\n\r\nexport type IState = {\r\n    userName: string\r\n    nameStartButton: string\r\n    nameNextButton: string\r\n    nameFinishButton: string\r\n    isEditable: boolean\r\n}\r\n\r\ntype ResponseType = {\r\n        nameStartButton: string\r\n        nameNextButton: string\r\n        nameFinishButton: string\r\n}\r\nconst initialState: IState = {\r\n    userName: '',\r\n    nameStartButton: '',\r\n    nameNextButton: '',\r\n    nameFinishButton: '',\r\n    isEditable: true\r\n}\r\n\r\nexport const settingsReducer = (state = initialState, action: ActionType): IState => {\r\n    switch (action.type) {\r\n        case \"SET-USER-NAME\":\r\n            return {...state, userName: action.name}\r\n        case \"CHANGE-EDITABLE-STATUS\":\r\n            return {...state, isEditable: action.value}\r\n        case \"SET-NAME-FOR-BUTTON\":\r\n            return {...state,\r\n                nameStartButton: action.date.nameStartButton,\r\n                nameNextButton: action.date.nameNextButton,\r\n                nameFinishButton: action.date.nameFinishButton\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setUserName>\r\n    | ReturnType<typeof changeEditableStatus>\r\n    | ReturnType<typeof setNameForButton>\r\n\r\nexport const setUserName = (name: string) => {\r\n    return {\r\n        type: 'SET-USER-NAME',\r\n        name\r\n    } as const\r\n}\r\nexport const changeEditableStatus = (value: boolean) => {\r\n    return {\r\n        type: 'CHANGE-EDITABLE-STATUS',\r\n        value\r\n    } as const\r\n}\r\nexport const setNameForButton = (date: ResponseType) => {\r\n    return {\r\n        type: 'SET-NAME-FOR-BUTTON',\r\n        date\r\n    } as const\r\n}\r\n\r\nexport const getDateForButtonTC = () => (dispatch: Dispatch) => {\r\n    fetch('http://localhost:5000/data')\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            dispatch(setNameForButton(res.nameButton))\r\n            console.log(res.nameButton)\r\n        })\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './Start.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changeEditableStatus, setUserName} from \"../state/settingsReducer\";\r\nimport {Link} from 'react-router-dom';\r\nimport {AppRootStateType} from \"../state/store\";\r\n\r\n\r\nexport const Start = () => {\r\n    let dispatch = useDispatch()\r\n    let isEditable = useSelector<AppRootStateType, boolean>(state => state.settings.isEditable)\r\n    let nameStartButton = useSelector<AppRootStateType, string>(state => state.settings.nameStartButton)\r\n\r\n    let [name, setName] = useState('')\r\n\r\n    const changeValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n        if (name.trim() !== '') {\r\n            dispatch(changeEditableStatus(false))\r\n        }\r\n    }\r\n    const addUserNameHandler = () => {\r\n        dispatch(setUserName(name))\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') addUserNameHandler()\r\n    }\r\n\r\n    return (\r\n        <div className={s.startBlock}>\r\n            <div className={s.startContainer}>\r\n                <div className={s.title}>\r\n                    <h1>Пожалуйста, примите участие в нашем опросе</h1>\r\n                </div>\r\n                <div className={s.conditions}>\r\n                    <p>Введите свое имя и нажмите на кнопку для запуска опроса<br/>\r\n                        (данное поле является обязательным)\r\n                    </p>\r\n                </div>\r\n                <div className={s.enterBlock}>\r\n                    <input className={s.inputName}\r\n                           type=\"text\"\r\n                           value={name}\r\n                           onChange={changeValueHandler}\r\n                           onKeyPress={onKeyPressHandler}\r\n                           placeholder=\"Ваше имя\"\r\n                    />\r\n\r\n                    <button className={s.startButton} onClick={addUserNameHandler} disabled={isEditable}>\r\n                        {isEditable ? nameStartButton : <Link to={'/test'}>{nameStartButton}</Link>}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","export type ResultType = {\r\n    id: number\r\n    userAnswer: string\r\n    quest: string\r\n}\r\nexport type IStateResults = {\r\n    results: ResultType[]\r\n}\r\n\r\n\r\nconst initialState: IStateResults = {\r\n    results: []\r\n}\r\n\r\nexport const resultsReducer = (state = initialState, action: ActionType): IStateResults => {\r\n    switch (action.type) {\r\n        case \"ADD-RESULT\":\r\n            let newResult = {id: action.id, userAnswer: action.answer, quest: action.quest}\r\n            let copy = {...state, results: [...state.results, newResult]}\r\n            console.log(copy)\r\n            return  copy\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = ReturnType<typeof addResult>\r\n\r\nexport const addResult = (id: number, answer: string, quest: string) => {\r\n    return {\r\n        type: 'ADD-RESULT',\r\n        id, answer,quest\r\n    } as const\r\n}\r\n","import React, {useState} from 'react';\r\nimport s from './Question.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {QuestionType} from \"../../state/questionsReducer\";\r\nimport {addResult, ResultType} from \"../../state/resultsReducer\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {IState} from \"../../state/settingsReducer\";\r\n\r\ntype QuestionPropsType = {\r\n    //currentId: number\r\n}\r\n\r\nexport const Question: React.FC<QuestionPropsType> = () => {\r\n    let dispatch = useDispatch()\r\n\r\n    let [answer, setAnswer] = useState('')\r\n    let [id, setId] = useState(1)\r\n\r\n    let questions = useSelector<AppRootStateType, QuestionType[]>(state => state.questions.questions)\r\n    let currentQuestion: QuestionType = questions.filter(q => q ? q.id === id : '')[0]\r\n\r\n    let results = useSelector<AppRootStateType, ResultType[]>(state => state.results.results)\r\n    let nameButton = useSelector<AppRootStateType, IState>(state => state.settings)\r\n\r\n\r\n    const addResultHandler = () => {\r\n\r\n        dispatch(addResult(id, answer, currentQuestion.quest))\r\n        setAnswer('')\r\n        if (id < 4) setId(++id)\r\n    }\r\n\r\n\r\n\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setAnswer(e.currentTarget.value)\r\n    }\r\n    const onChangeCallback = (currentId: number, e: React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setAnswer(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const mappedOptions = currentQuestion && currentQuestion.answerType !== 'text'\r\n        ? currentQuestion.answers.map((options) => (\r\n            <div key={options.id} className={s.options}>\r\n                <input type={currentQuestion.answerType}\r\n                       name='choice'\r\n                       value={options.answer}\r\n                       onChange={(e) => onChangeCallback(id, e)}\r\n                />\r\n                {options.answer}\r\n            </div>\r\n        ))\r\n        : <input className={s.textType}\r\n                 type={currentQuestion ? currentQuestion.answerType : ''}\r\n                 value={answer} autoFocus\r\n                 onChange={onChangeHandler}\r\n        />\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.question}>\r\n                <span>Вопрос: {id}/{questions.length}</span>\r\n                <span>\r\n                    {currentQuestion ? currentQuestion.quest : ''}\r\n                </span>\r\n\r\n            </div>\r\n\r\n            <div className={s.answer}>\r\n                <div>\r\n                    {mappedOptions}\r\n                </div>\r\n\r\n            </div>\r\n            {results.length >= 4\r\n                ? <button className={s.button}>\r\n                    <Link to={'/results'}>{nameButton.nameFinishButton}</Link>\r\n                </button>\r\n                : <button className={s.button} onClick={addResultHandler}>{nameButton.nameNextButton}</button>\r\n            }\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\n","import { Dispatch } from \"redux\"\r\n\r\nexport type QuestionType = {\r\n    id: number\r\n    quest: string\r\n    answerType: string\r\n    answers: AnswerType[]\r\n}\r\ntype AnswerType = {\r\n    id: string\r\n    answer: string\r\n}\r\nexport type IState = {\r\n    questions: QuestionType[]\r\n}\r\n\r\n\r\nconst initialState: IState = {\r\n    questions: []\r\n}\r\n\r\nexport const questionsReducer = (state = initialState, action: ActionType): IState => {\r\n    switch (action.type) {\r\n        case \"SET-QUESTION\":\r\n            return {...state, questions: action.date}\r\n        case \"SET-CURRENT-QUESTION\":\r\n            return {...state, questions: state.questions.filter( f => f.id === action.id)}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setQuestion>\r\n    | ReturnType<typeof setCurrentQuestion>\r\n    | ReturnType<typeof changeStatus>\r\n\r\n\r\nexport const setQuestion = (date: QuestionType[]) => {\r\n    return {\r\n        type: 'SET-QUESTION',\r\n        date\r\n    } as const\r\n}\r\n\r\nexport const setCurrentQuestion = (id: number) => {\r\n    return {\r\n        type: 'SET-CURRENT-QUESTION',\r\n        id\r\n    } as const\r\n}\r\nexport const changeStatus = (isChecked: boolean) => {\r\n    return {\r\n        type: 'CHANGE-STATUS',\r\n        isChecked\r\n    } as const\r\n}\r\n\r\nexport const getQuestionTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        fetch('http://localhost:5000/data')\r\n        .then(res => res.json())\r\n         .then(res => {\r\n             dispatch(setQuestion(res.questions))\r\n         })\r\n        //dispatch(setCurrentQuestion(id))\r\n    }\r\n}","import React, {useEffect} from 'react';\r\nimport s from './Test.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Question} from \"./question/Question\";\r\nimport {getQuestionTC} from '../state/questionsReducer';\r\n\r\n\r\nexport const Test = () => {\r\n\r\n    useEffect(() => {\r\n        dispatch(getQuestionTC())\r\n    }, [])\r\n\r\n\r\n    let dispatch = useDispatch()\r\n\r\n\r\n    return (\r\n        <div className={s.testBlock}>\r\n            <div className={s.testContainer}>\r\n\r\n                <div className={s.testContainerBottom}/>\r\n                <div className={s.testContainerMiddle}/>\r\n                <div className={s.testContainerTop}>\r\n                    <Question/>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport s from '../resultForQuestion/ResultForQuestion.module.css'\r\n\r\n\r\ntype ResultForQuestionPropsType = {\r\n    id: number\r\n    userAnswer: string\r\n    quest: string\r\n}\r\n\r\nexport const ResultForQuestion: React.FC<ResultForQuestionPropsType> = ({\r\n                                                                            id,\r\n                                                                            userAnswer,\r\n                                                                            quest\r\n                                                                        }) => {\r\n\r\n    const [isHidden, setIsHidden] = useState(true)\r\n\r\n    const hiddenBlock = () => {\r\n        setIsHidden(!isHidden)\r\n    }\r\n    return (\r\n        <div className={s.resultForQuestionContainer}>\r\n            <div className={s.coverBlock}>\r\n                <div onClick={hiddenBlock} className={s.questionNumber}>\r\n                    {id}\r\n                </div>\r\n                <div className={s.questionTitle}>\r\n                    {quest}\r\n                </div>\r\n\r\n            </div>\r\n            {!isHidden && <div className={s.answerBlock}>\r\n                {userAnswer}\r\n            </div>}\r\n\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Results.module.css'\r\nimport {ResultForQuestion} from \"./resultForQuestion/ResultForQuestion\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {ResultType} from \"../state/resultsReducer\";\r\n\r\n\r\nexport const Results = () => {\r\n    let results = useSelector<AppRootStateType, ResultType[]>(state => state.results.results)\r\n\r\n    return (\r\n        <div className={s.resultsBlock}>\r\n            <div className={s.title}>\r\n                <h3>Нажми на номер вопроса и узнай свой результат</h3>\r\n            </div>\r\n            <div className={s.resultsContainer}>\r\n                {\r\n                    results.length !== 0\r\n                        ? results.map(r => {\r\n                            return <ResultForQuestion key={r.id}\r\n                                                      id={r.id}\r\n                                                      userAnswer={r.userAnswer}\r\n                                                      quest={r.quest}\r\n                            />\r\n                        })\r\n                        : ''\r\n                }\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Footer.module.css'\r\n\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <div className={s.footer}>\r\n            <div>Спасибо за участие в опросе</div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Header} from \"./header/Header\";\nimport {Start} from \"./start/Start\";\nimport {Test} from \"./test/Test\";\nimport {Results} from \"./results/Results\";\nimport {Footer} from \"./footer/Footer\";\nimport {BrowserRouter as Router, Route, Routes} from 'react-router-dom';\nimport {useDispatch} from \"react-redux\";\nimport {setNameForButton} from './state/settingsReducer';\n\n\nfunction App() {\n    let dispatch = useDispatch()\n\n\n    useEffect(() => {\n        fetch('http://localhost:5000/data')\n            .then(res => res.json())\n            .then(res => dispatch(setNameForButton(res.nameButton)))\n\n    }, [])\n\n\n\n\n    return (\n        <div className=\"App\">\n            <Router>\n                <Header/>\n                <Routes>\n                    <Route path={'/'} element={<Start/>}/>\n\n                    <Route path={'/start'} element={<Start/>}/>\n                    <Route path={'/test'} element={<Test/>}/>\n                    <Route path={'/results'} element={<Results/>}/>\n                </Routes>\n\n                <Footer/>\n            </Router>\n\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport {settingsReducer} from \"./settingsReducer\";\r\nimport {questionsReducer} from \"./questionsReducer\";\r\nimport {resultsReducer} from \"./resultsReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    settings: settingsReducer,\r\n    questions: questionsReducer,\r\n    results: resultsReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}><App/></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}